package Algorithm.leetcode.leetcode.editor.cn;
//n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。
//
// 
//
// 上图为 8 皇后问题的一种解法。 
//
// 给定一个整数 n，返回 n 皇后不同的解决方案的数量。 
//
// 示例: 
//
// 输入: 4
//输出: 2
//解释: 4 皇后问题存在如下两个不同的解法。
//[
// [".Q..",  // 解法 1
//  "...Q",
//  "Q...",
//  "..Q."],
//
// ["..Q.",  // 解法 2
//  "Q...",
//  "...Q",
//  ".Q.."]
//]
// 
//
// 
//
// 提示： 
//
// 
// 皇后，是国际象棋中的棋子，意味着国王的妻子。皇后只做一件事，那就是“吃子”。当她遇见可以吃的棋子时，就迅速冲上去吃掉棋子。当然，她横、竖、斜都可走一或 N
//-1 步，可进可退。（引用自 百度百科 - 皇后 ） 
// 
// Related Topics 回溯算法 
// 👍 215 👎 0


import java.util.HashSet;
import java.util.Set;

//leetcode submit region begin(Prohibit modification and deletion)
class Solution29 {
    // 题目链接：https://leetcode-cn.com/problems/n-queens-ii/description/

    // n皇后解法的数量
    public int count = 0;
    public int totalNQueens(int n) {
        // 边界条件
        if (n < 1) {
            return 0;
        }

        dfs(n, 0, 0, 0, 0);
        return count;
    }

    public void dfs(int n, int row, int col, int pie, int na) {
        // 递归终止条件, 每一次能够走到最后一行都对应N皇后的一种解法
        if (row >= n) {
            count+=1;
            return;
        }

        // 这一步是关键，col | pie | na就是二进制位对应中第1位到第n位中有多少个1，也就是有多少个位子是已经被占了的
        // 取一个~就是说有多少个位子是没有被占的, 那为什么又要与上右边那一坨呢？
        // 这是因为我是N皇后，我只需要一个int数字的N位即可，假如是8皇后，我只需要8位，其他的位是不需要的所以要将其置为0
        // 比如现在 col | pie | na 等于000000000000000000000000 10101001，代表现在8皇后有这些位置都被占着
        // 那我取一个~ 就代表没有被占着的位子，但是取非之后会把高位那些没用的位全部变成1，如下：
        // 111111111111111111111111 01010110 ，而由于我们判断一个位子可不可用，循环的时候用的位子上是1这样一个标准来判断
        // 这样取反之后就会导致我们能用的1的个数变多，本来是N皇后，变成了N + 24皇后（高位24位）
        // 所以我们要把高位的24位干掉。我们来看（1 << n),还是以8皇后为例：000000000000000000000001 00000000
        // 再减一之后 000000000000000000000000 11111111
        // 再与之前的 111111111111111111111111 01010110 相与，这样我就得到了我们要的那8位或者是N位，如下：
        // 000000000000000000000000 01010110
        int bits = (~(col | pie | na)) & ((1 << n) - 1);

        // 循环开始判断
        while (bits != 0) {
            // 取到最低的那一位
            int p = bits & -bits;
            bits = bits & (bits - 1);
            // 既然决定将p这个位置放上皇后，那bits中自然要去掉他

            // 到这里位置都是在处理当前层逻辑

            // dfs 到下一层
            // 这里的pie | p要左移一位的原因是对于下一层而言，在撇这条线上的位子不能用他感知不到，实际上我们举个例子看就知道了
            // 加入当前层取到的p的位子是00001000
            // 那么对于下一行而言，列就是这个列使我们不能用的，pie的话大家想想
            // 00001000当前从左到右第五个格子被一个皇后占着了，对于撇而言，下一行皇后是不是不能放在第四个格子地方，而对于na而言
            // 就是不能放在第六个格子的地方。所以撇要左移一位，na要右移一位
            dfs(n, row + 1, col | p, (pie | p) << 1, (na | p) >> 1);

            // 不需要回退lie, pie, na的状态，因为我是去与，并没有真正改掉他们的值。
        }
    }
}
//leetcode submit region end(Prohibit modification and deletion)
