package Algorithm.leetcode.leetcode.editor.cn;
//判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
//
// 
// 数字 1-9 在每一行只能出现一次。 
// 数字 1-9 在每一列只能出现一次。 
// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。 
// 
//
// 
//
// 上图是一个部分填充的有效的数独。 
//
// 数独部分空格内已填入了数字，空白格用 '.' 表示。 
//
// 示例 1: 
//
// 输入:
//[
//  ["5","3",".",".","7",".",".",".","."],
//  ["6",".",".","1","9","5",".",".","."],
//  [".","9","8",".",".",".",".","6","."],
//  ["8",".",".",".","6",".",".",".","3"],
//  ["4",".",".","8",".","3",".",".","1"],
//  ["7",".",".",".","2",".",".",".","6"],
//  [".","6",".",".",".",".","2","8","."],
//  [".",".",".","4","1","9",".",".","5"],
//  [".",".",".",".","8",".",".","7","9"]
//]
//输出: true
// 
//
// 示例 2: 
//
// 输入:
//[
//  ["8","3",".",".","7",".",".",".","."],
//  ["6",".",".","1","9","5",".",".","."],
//  [".","9","8",".",".",".",".","6","."],
//  ["8",".",".",".","6",".",".",".","3"],
//  ["4",".",".","8",".","3",".",".","1"],
//  ["7",".",".",".","2",".",".",".","6"],
//  [".","6",".",".",".",".","2","8","."],
//  [".",".",".","4","1","9",".",".","5"],
//  [".",".",".",".","8",".",".","7","9"]
//]
//输出: false
//解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
//     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。 
//
// 说明: 
//
// 
// 一个有效的数独（部分已被填充）不一定是可解的。 
// 只需要根据以上规则，验证已经填入的数字是否有效即可。 
// 给定数独序列只包含数字 1-9 和字符 '.' 。 
// 给定数独永远是 9x9 形式的。 
// 
// Related Topics 哈希表 
// 👍 447 👎 0


import java.util.HashSet;
import java.util.Set;

//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    // 题目链接：https://leetcode-cn.com/problems/valid-sudoku/
    public boolean isValidSudoku(char[][] board) {
        // 和N皇后那个题目类似，N皇后那个题目是定义列，撇，呐的set来进行判重。
        // 这个是定义row, col, block来进行判重。

        // 边界条件
        if (board.length == 0) {
            return false;
        }

        // 一共是9行9列9个块，所以分别set数量都应该是9，也就是我们需要容量为9的数组
        Set<Character>[] row = new HashSet[9];
        Set<Character>[] col = new HashSet[9];
        Set<Character>[] block = new HashSet[9];

        int m = board.length;
        int n = board[0].length;

        // 初始化行，列，块数组中的每个hashset
        for (int i = 0; i < m; i++) {
            row[i] = new HashSet<>();
            col[i] = new HashSet<>();
            block[i] = new HashSet<>();
        }

        // 遍历数独表
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                // 如果当前格子的元素不是点的时候，也就是有数字的时候
                if (board[i][j] != '.') {
                    // 判断行是否重复
                    // 如果当前行还能增加成功，证明还没有重复元素，是合法的数独
                    // 反之，如果不能增加成功，证明当前行之前已经有过这个数字，肯定是不合法的数独了。
                    if (!row[i].add(board[i][j])) {
                        return false;
                    }

                    // 判断列是否重复
                    // 同样的，如果不能再增加进去，证明已经重复了。
                    if (!col[j].add(board[i][j])) {
                        return false;
                    }

                    // 判断块是否有重复
                    int blockNum = (i / 3) * 3 + j / 3;
                    // 同上
                    if (!block[blockNum].add(board[i][j])) {
                        return false;
                    }
                }
            }
        }

        return true;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
